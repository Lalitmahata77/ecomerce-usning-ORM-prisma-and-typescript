// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(191)
  email      String   @unique @db.VarChar(191)
  password   String
  profile    String?
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  isAdmin    Boolean  @default(false)
  Review     Review[]
  orders     Order[]
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(191)
  Post Product[]
}

model Review {
  id      Int    @id @default(autoincrement())
  name    String @db.VarChar(191)
  comment String @db.VarChar(191)
  rating  Int
  user    User   @relation(fields: [user_id], references: [id])
  user_id Int

  product   Product? @relation(fields: [postId], references: [id])
  postId Int?
}

model Product {
  id              Int      @id @default(autoincrement())
  name            String   @db.VarChar(192)
  image           String
  quantity        Int
  description     String
  reviews         Review[]
  orderItems      OrderItems[]
  rating          Int?
  numberOfReviews Int?
  price           Float
  countInStock    Int
  category        Category @relation(fields: [category_id], references: [id])
  category_id     Int
  brand String
  createdAt DateTime @default(now())
}
model OrderItems {
  id Int @id @default(autoincrement())
  order Order @relation(fields: [order_id], references: [id])
  order_id Int
  product Product @relation(fields: [product_id], references: [id])
  product_id Int
  name String
  qty Int
  image String
  price Float
}
model Order {
  id Int @id @default(autoincrement())
  user User @relation(fields: [user_id], references: [id])
  user_id Int
  orderItems OrderItems[]
  shippingAddress ShippingAddress @relation(fields: [shipping_id], references: [id])
  shipping_id Int
  paymentMethod String
  paymentResult PaymentResult @relation(fields: [paymentResult_id], references: [id])
  paymentResult_id Int
  itemsPrice Float
  taxPrice Float
  shippingPrice Float
  totalPrice Float
  isPaid Boolean @default(false)
  paidAt DateTime?
  isDelivered Boolean @default(false)
  deliveredAt DateTime?

}

model ShippingAddress {
  id         Int     @id @default(autoincrement())
  address    String
  city       String
  postalCode String
  country    String
  order      Order[]  
}

model PaymentResult {
  id          Int     @id @default(autoincrement())
  paymentId   String?
  status      String?
  updateTime  String?
  emailAddress String?
  order       Order[] 
}
